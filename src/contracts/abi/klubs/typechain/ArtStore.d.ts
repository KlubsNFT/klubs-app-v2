/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArtStoreInterface extends ethers.utils.Interface {
  functions: {
    "onAuctionsCount()": FunctionFragment;
    "userAuctionInfoLength(address)": FunctionFragment;
    "cancelAuctionByOwner(uint256[])": FunctionFragment;
    "biddings(uint256,uint256)": FunctionFragment;
    "banUser(address)": FunctionFragment;
    "mileage()": FunctionFragment;
    "setArtists(address)": FunctionFragment;
    "onSalesIndex(uint256)": FunctionFragment;
    "userAuctionInfo(address,uint256)": FunctionFragment;
    "checkAuction(uint256)": FunctionFragment;
    "onSalesCount()": FunctionFragment;
    "bid(uint256,uint256,uint256)": FunctionFragment;
    "cancelOfferByOwner(uint256[],uint256[])": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "cancelSaleByOwner(uint256[])": FunctionFragment;
    "userBiddingInfoLength(address)": FunctionFragment;
    "userOfferInfo(address,uint256)": FunctionFragment;
    "checkSelling(uint256)": FunctionFragment;
    "offers(uint256,uint256)": FunctionFragment;
    "unbanUser(address)": FunctionFragment;
    "biddingCount(uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "userSellInfoLength(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "offerCount(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "acceptOffer(uint256,uint256)": FunctionFragment;
    "setAuctionExtensionInterval(uint256)": FunctionFragment;
    "onAuctionsIndex(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "changeSellPrice(uint256[],uint256[])": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "isBanned(address)": FunctionFragment;
    "userOfferInfoLength(address)": FunctionFragment;
    "onAuctions(uint256)": FunctionFragment;
    "auctionExtensionInterval()": FunctionFragment;
    "setArts(address)": FunctionFragment;
    "arts()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "userSellInfo(address,uint256)": FunctionFragment;
    "sales(uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "artists()": FunctionFragment;
    "batchTransfer(uint256[],address[])": FunctionFragment;
    "createAuction(uint256,uint256,uint256)": FunctionFragment;
    "sell(uint256[],uint256[])": FunctionFragment;
    "cancelOffer(uint256,uint256)": FunctionFragment;
    "cancelSale(uint256[])": FunctionFragment;
    "userBiddingInfo(address,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "onSales(uint256)": FunctionFragment;
    "makeOffer(uint256,uint256,uint256)": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "buy(uint256[],uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "onAuctionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctionInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuctionByOwner",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "biddings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "banUser", values: [string]): string;
  encodeFunctionData(functionFragment: "mileage", values?: undefined): string;
  encodeFunctionData(functionFragment: "setArtists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onSalesIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctionInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onSalesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOfferByOwner",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancelSaleByOwner",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userOfferInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSelling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unbanUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "biddingCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSellInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionExtensionInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctionsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeSellPrice",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isBanned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userOfferInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExtensionInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setArts", values: [string]): string;
  encodeFunctionData(functionFragment: "arts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userSellInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sales", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(functionFragment: "artists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "onAuctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuctionInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuctionByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "biddings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "banUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mileage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setArtists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSalesIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSalesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOfferByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaleByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOfferInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbanUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "biddingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userSellInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionExtensionInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAuctionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBanned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOfferInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onAuctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionExtensionInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setArts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSellInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;

  events: {
    "Sell(uint256,address,uint256)": EventFragment;
    "ChangeSellPrice(uint256,address,uint256)": EventFragment;
    "Buy(uint256,address,uint256)": EventFragment;
    "CancelSale(uint256,address)": EventFragment;
    "MakeOffer(uint256,uint256,address,uint256)": EventFragment;
    "CancelOffer(uint256,uint256,address)": EventFragment;
    "AcceptOffer(uint256,uint256,address)": EventFragment;
    "CreateAuction(uint256,address,uint256,uint256)": EventFragment;
    "CancelAuction(uint256,address)": EventFragment;
    "Bid(uint256,address,uint256)": EventFragment;
    "Claim(uint256,address,uint256)": EventFragment;
    "CancelSaleByOwner(uint256)": EventFragment;
    "CancelOfferByOwner(uint256,uint256)": EventFragment;
    "CancelAuctionByOwner(uint256)": EventFragment;
    "Ban(address)": EventFragment;
    "Unban(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSellPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSaleByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOfferByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuctionByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ArtStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArtStoreInterface;

  functions: {
    onAuctionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "onAuctionsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelAuctionByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuctionByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    biddings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    banUser(user: string, overrides?: Overrides): Promise<ContractTransaction>;

    "banUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mileage(overrides?: CallOverrides): Promise<[string]>;

    "mileage()"(overrides?: CallOverrides): Promise<[string]>;

    setArtists(
      _artists: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setArtists(address)"(
      _artists: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onSalesIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onSalesIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    checkAuction(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkAuction(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onSalesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "onSalesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bid(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bid(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelOfferByOwner(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOfferByOwner(uint256[],uint256[])"(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelSaleByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelSaleByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOfferInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userOfferInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    checkSelling(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkSelling(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    offers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        offeror: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "offers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        offeror: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    unbanUser(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbanUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    biddingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "biddingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        startPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        startPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "offerCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionExtensionInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionExtensionInterval(uint256)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onAuctionsIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onAuctionsIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    changeSellPrice(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSellPrice(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelAuction(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuction(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isBanned(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isBanned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onAuctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "auctionExtensionInterval()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setArts(_arts: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setArts(address)"(
      _arts: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    arts(overrides?: CallOverrides): Promise<[string]>;

    "arts()"(overrides?: CallOverrides): Promise<[string]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<[string]>;

    userSellInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userSellInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    artists(overrides?: CallOverrides): Promise<[string]>;

    "artists()"(overrides?: CallOverrides): Promise<[string]>;

    batchTransfer(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTransfer(uint256[],address[])"(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAuction(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAuction(uint256,uint256,uint256)"(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sell(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sell(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelSale(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelSale(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    onSales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onSales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeOffer(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buy(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256[],uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  onAuctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "onAuctionsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  userAuctionInfoLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userAuctionInfoLength(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelAuctionByOwner(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuctionByOwner(uint256[])"(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  biddings(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      bidder: string;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  "biddings(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      bidder: string;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  banUser(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "banUser(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mileage(overrides?: CallOverrides): Promise<string>;

  "mileage()"(overrides?: CallOverrides): Promise<string>;

  setArtists(
    _artists: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setArtists(address)"(
    _artists: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onSalesIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "onSalesIndex(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userAuctionInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  "userAuctionInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  checkAuction(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "checkAuction(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "onSalesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  bid(
    id: BigNumberish,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bid(uint256,uint256,uint256)"(
    id: BigNumberish,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelOfferByOwner(
    ids: BigNumberish[],
    offerIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOfferByOwner(uint256[],uint256[])"(
    ids: BigNumberish[],
    offerIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelSaleByOwner(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelSaleByOwner(uint256[])"(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBiddingInfoLength(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBiddingInfoLength(address)"(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOfferInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  "userOfferInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  checkSelling(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "checkSelling(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  offers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      offeror: string;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  "offers(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      offeror: string;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  unbanUser(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "unbanUser(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  biddingCount(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "biddingCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      seller: string;
      startPrice: BigNumber;
      endBlock: BigNumber;
    }
  >;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      seller: string;
      startPrice: BigNumber;
      endBlock: BigNumber;
    }
  >;

  userSellInfoLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userSellInfoLength(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerCount(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "offerCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptOffer(
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptOffer(uint256,uint256)"(
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionExtensionInterval(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionExtensionInterval(uint256)"(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onAuctionsIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "onAuctionsIndex(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  changeSellPrice(
    ids: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSellPrice(uint256[],uint256[])"(
    ids: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelAuction(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuction(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isBanned(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isBanned(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userOfferInfoLength(
    offeror: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userOfferInfoLength(address)"(
    offeror: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onAuctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "onAuctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  setArts(_arts: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setArts(address)"(
    _arts: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  arts(overrides?: CallOverrides): Promise<string>;

  "arts()"(overrides?: CallOverrides): Promise<string>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

  userSellInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  "userSellInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  sales(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

  "sales(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  artists(overrides?: CallOverrides): Promise<string>;

  "artists()"(overrides?: CallOverrides): Promise<string>;

  batchTransfer(
    ids: BigNumberish[],
    to: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTransfer(uint256[],address[])"(
    ids: BigNumberish[],
    to: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAuction(
    id: BigNumberish,
    startPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAuction(uint256,uint256,uint256)"(
    id: BigNumberish,
    startPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sell(
    ids: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sell(uint256[],uint256[])"(
    ids: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelOffer(
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOffer(uint256,uint256)"(
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelSale(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelSale(uint256[])"(
    ids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBiddingInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  "userBiddingInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  onSales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "onSales(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeOffer(
    id: BigNumberish,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeOffer(uint256,uint256,uint256)"(
    id: BigNumberish,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeReceiver(address)"(
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buy(
    ids: BigNumberish[],
    prices: BigNumberish[],
    mileages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256[],uint256[],uint256[])"(
    ids: BigNumberish[],
    prices: BigNumberish[],
    mileages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    onAuctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "onAuctionsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuctionByOwner(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuctionByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    biddings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    banUser(user: string, overrides?: CallOverrides): Promise<void>;

    "banUser(address)"(user: string, overrides?: CallOverrides): Promise<void>;

    mileage(overrides?: CallOverrides): Promise<string>;

    "mileage()"(overrides?: CallOverrides): Promise<string>;

    setArtists(_artists: string, overrides?: CallOverrides): Promise<void>;

    "setArtists(address)"(
      _artists: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onSalesIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSalesIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    checkAuction(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "checkAuction(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "onSalesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bid(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOfferByOwner(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOfferByOwner(uint256[],uint256[])"(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSaleByOwner(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelSaleByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userOfferInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    checkSelling(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "checkSelling(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    offers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        offeror: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "offers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        offeror: string;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    unbanUser(user: string, overrides?: CallOverrides): Promise<void>;

    "unbanUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    biddingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        startPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        startPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCount(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "offerCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionExtensionInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionExtensionInterval(uint256)"(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onAuctionsIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    changeSellPrice(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSellPrice(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelAuction(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isBanned(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isBanned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    setArts(_arts: string, overrides?: CallOverrides): Promise<void>;

    "setArts(address)"(_arts: string, overrides?: CallOverrides): Promise<void>;

    arts(overrides?: CallOverrides): Promise<string>;

    "arts()"(overrides?: CallOverrides): Promise<string>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

    userSellInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userSellInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    artists(overrides?: CallOverrides): Promise<string>;

    "artists()"(overrides?: CallOverrides): Promise<string>;

    batchTransfer(
      ids: BigNumberish[],
      to: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransfer(uint256[],address[])"(
      ids: BigNumberish[],
      to: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createAuction(uint256,uint256,uint256)"(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(ids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "cancelSale(uint256[])"(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    onSales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "onSales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "makeOffer(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeReceiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(uint256[],uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Sell(
      id: BigNumberish | null,
      owner: string | null,
      price: null
    ): EventFilter;

    ChangeSellPrice(
      id: BigNumberish | null,
      owner: string | null,
      price: null
    ): EventFilter;

    Buy(
      id: BigNumberish | null,
      buyer: string | null,
      price: null
    ): EventFilter;

    CancelSale(id: BigNumberish | null, owner: string | null): EventFilter;

    MakeOffer(
      id: BigNumberish | null,
      offerId: BigNumberish | null,
      offeror: null,
      price: null
    ): EventFilter;

    CancelOffer(
      id: BigNumberish | null,
      offerId: BigNumberish | null,
      offeror: null
    ): EventFilter;

    AcceptOffer(
      id: BigNumberish | null,
      offerId: BigNumberish | null,
      acceptor: null
    ): EventFilter;

    CreateAuction(
      id: BigNumberish | null,
      owner: string | null,
      startPrice: null,
      endBlock: null
    ): EventFilter;

    CancelAuction(id: BigNumberish | null, owner: string | null): EventFilter;

    Bid(
      id: BigNumberish | null,
      bidder: string | null,
      price: null
    ): EventFilter;

    Claim(
      id: BigNumberish | null,
      bidder: string | null,
      price: null
    ): EventFilter;

    CancelSaleByOwner(id: BigNumberish | null): EventFilter;

    CancelOfferByOwner(
      id: BigNumberish | null,
      offerId: BigNumberish | null
    ): EventFilter;

    CancelAuctionByOwner(id: BigNumberish | null): EventFilter;

    Ban(user: string | null): EventFilter;

    Unban(user: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    onAuctionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "onAuctionsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuctionByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuctionByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    biddings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddings(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    banUser(user: string, overrides?: Overrides): Promise<BigNumber>;

    "banUser(address)"(user: string, overrides?: Overrides): Promise<BigNumber>;

    mileage(overrides?: CallOverrides): Promise<BigNumber>;

    "mileage()"(overrides?: CallOverrides): Promise<BigNumber>;

    setArtists(_artists: string, overrides?: Overrides): Promise<BigNumber>;

    "setArtists(address)"(
      _artists: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onSalesIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSalesIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAuction(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkAuction(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "onSalesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bid(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelOfferByOwner(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOfferByOwner(uint256[],uint256[])"(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelSaleByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelSaleByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSelling(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSelling(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbanUser(user: string, overrides?: Overrides): Promise<BigNumber>;

    "unbanUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    biddingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(_fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerCount(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "offerCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    acceptOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionExtensionInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionExtensionInterval(uint256)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onAuctionsIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeSellPrice(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeSellPrice(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelAuction(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancelAuction(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isBanned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBanned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    setArts(_arts: string, overrides?: Overrides): Promise<BigNumber>;

    "setArts(address)"(
      _arts: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    arts(overrides?: CallOverrides): Promise<BigNumber>;

    "arts()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    userSellInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    artists(overrides?: CallOverrides): Promise<BigNumber>;

    "artists()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransfer(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTransfer(uint256[],address[])"(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    createAuction(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAuction(uint256,uint256,uint256)"(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sell(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sell(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelSale(ids: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

    "cancelSale(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    onSales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "onSales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeOffer(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buy(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(uint256[],uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onAuctionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onAuctionsCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuctionByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuctionByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    biddings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddings(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    banUser(user: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "banUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mileage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mileage()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setArtists(
      _artists: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setArtists(address)"(
      _artists: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onSalesIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onSalesIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAuction(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkAuction(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onSalesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onSalesCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bid(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelOfferByOwner(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOfferByOwner(uint256[],uint256[])"(
      ids: BigNumberish[],
      offerIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelSaleByOwner(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelSaleByOwner(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOfferInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userOfferInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSelling(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSelling(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbanUser(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbanUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    biddingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offerCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionExtensionInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionExtensionInterval(uint256)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onAuctionsIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctionsIndex(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeSellPrice(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSellPrice(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuction(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isBanned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBanned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionExtensionInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionExtensionInterval()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setArts(
      _arts: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setArts(address)"(
      _arts: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    arts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "arts()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userSellInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userSellInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    artists(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "artists()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransfer(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTransfer(uint256[],address[])"(
      ids: BigNumberish[],
      to: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,uint256,uint256)"(
      id: BigNumberish,
      startPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sell(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sell(uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOffer(uint256,uint256)"(
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelSale(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelSale(uint256[])"(
      ids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onSales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onSales(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeOffer(uint256,uint256,uint256)"(
      id: BigNumberish,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buy(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256[],uint256[],uint256[])"(
      ids: BigNumberish[],
      prices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
