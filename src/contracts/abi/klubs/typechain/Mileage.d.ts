/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MileageInterface extends ethers.utils.Interface {
  functions: {
    "mileages(address)": FunctionFragment;
    "setMileagePercent(uint256)": FunctionFragment;
    "use(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOnlyKlubsPercent(uint256)": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "mileagePercent()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "charge(address,uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "onlyKlubsPercent()": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "mileages", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMileagePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "use",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlyKlubsPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mileagePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyKlubsPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "mileages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMileagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "use", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlyKlubsPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mileagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyKlubsPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddToWhitelist(address)": EventFragment;
    "RemoveFromWhitelist(address)": EventFragment;
    "Charge(address,uint256)": EventFragment;
    "Use(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Use"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Mileage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MileageInterface;

  functions: {
    mileages(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "mileages(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMileagePercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMileagePercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    use(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "use(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOnlyKlubsPercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOnlyKlubsPercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFromWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    mileagePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mileagePercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    charge(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "charge(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    onlyKlubsPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "onlyKlubsPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToWhitelist(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  mileages(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "mileages(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMileagePercent(
    percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMileagePercent(uint256)"(
    percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  use(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "use(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOnlyKlubsPercent(
    percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOnlyKlubsPercent(uint256)"(
    percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFromWhitelist(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  mileagePercent(overrides?: CallOverrides): Promise<BigNumber>;

  "mileagePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  charge(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "charge(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  onlyKlubsPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "onlyKlubsPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  addToWhitelist(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToWhitelist(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    mileages(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mileages(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMileagePercent(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMileagePercent(uint256)"(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    use(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "use(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOnlyKlubsPercent(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOnlyKlubsPercent(uint256)"(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhitelist(addr: string, overrides?: CallOverrides): Promise<void>;

    "removeFromWhitelist(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    mileagePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "mileagePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    charge(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "charge(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    onlyKlubsPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyKlubsPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(addr: string, overrides?: CallOverrides): Promise<void>;

    "addToWhitelist(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddToWhitelist(addr: string | null): EventFilter;

    RemoveFromWhitelist(addr: string | null): EventFilter;

    Charge(user: string | null, amount: null): EventFilter;

    Use(user: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    mileages(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mileages(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMileagePercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMileagePercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    use(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "use(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOnlyKlubsPercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOnlyKlubsPercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeFromWhitelist(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFromWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    mileagePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "mileagePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    charge(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "charge(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyKlubsPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyKlubsPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "addToWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mileages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mileages(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMileagePercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMileagePercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    use(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "use(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOnlyKlubsPercent(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOnlyKlubsPercent(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFromWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mileagePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mileagePercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charge(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "charge(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyKlubsPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onlyKlubsPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToWhitelist(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
