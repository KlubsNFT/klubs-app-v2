/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IItemStoreInterface extends ethers.utils.Interface {
  functions: {
    "userAuctionInfoLength(address)": FunctionFragment;
    "onSalesCount(address)": FunctionFragment;
    "auctionsOnMetaverseLength(uint256)": FunctionFragment;
    "biddings(bytes32,uint256)": FunctionFragment;
    "userAuctionInfo(address,uint256)": FunctionFragment;
    "createAuction(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "cancelSale(bytes32[])": FunctionFragment;
    "userBiddingInfoLength(address)": FunctionFragment;
    "acceptOffer(bytes32,uint256)": FunctionFragment;
    "batchTransfer(uint256[],address[],uint256[],address[],uint256[])": FunctionFragment;
    "cancelAuction(bytes32)": FunctionFragment;
    "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "canOffer(address,uint256,address,uint256,uint256)": FunctionFragment;
    "userOfferInfo(address,uint256)": FunctionFragment;
    "biddingsCount(bytes32)": FunctionFragment;
    "bid(bytes32,uint256,uint256)": FunctionFragment;
    "canCreateAuction(address,uint256,address,uint256,uint256)": FunctionFragment;
    "userSellInfoLength(address)": FunctionFragment;
    "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])": FunctionFragment;
    "auctionsCount(address,uint256)": FunctionFragment;
    "userOnSaleAmounts(address,address,uint256)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "buy(bytes32[],uint256[],uint256[],uint256[])": FunctionFragment;
    "sales(address,uint256,uint256)": FunctionFragment;
    "onAuctions(address,uint256)": FunctionFragment;
    "canBid(address,uint256,bytes32)": FunctionFragment;
    "changeSellPrice(bytes32[],uint256[])": FunctionFragment;
    "getSaleInfo(bytes32)": FunctionFragment;
    "isBanned(address)": FunctionFragment;
    "userOfferInfoLength(address)": FunctionFragment;
    "offersCount(address,uint256)": FunctionFragment;
    "auctionExtensionInterval()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "userSellInfo(address,uint256)": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "getAuctionInfo(bytes32)": FunctionFragment;
    "onAuctionsCount(address)": FunctionFragment;
    "auctionsOnMetaverse(uint256,uint256)": FunctionFragment;
    "auctions(address,uint256,uint256)": FunctionFragment;
    "salesOnMetaverseLength(uint256)": FunctionFragment;
    "onSales(address,uint256)": FunctionFragment;
    "userBiddingInfo(address,uint256)": FunctionFragment;
    "getOfferInfo(bytes32)": FunctionFragment;
    "fee()": FunctionFragment;
    "canSell(address,uint256,address,uint256,uint256)": FunctionFragment;
    "offers(address,uint256,uint256)": FunctionFragment;
    "salesCount(address,uint256)": FunctionFragment;
    "cancelOffer(bytes32)": FunctionFragment;
    "salesOnMetaverse(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "userAuctionInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onSalesCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsOnMetaverseLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "biddings",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctionInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [BigNumberish[], string[], BigNumberish[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canOffer",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOfferInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "biddingsCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canCreateAuction",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSellInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOnSaleAmounts",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sales",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canBid",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSellPrice",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isBanned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userOfferInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "offersCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExtensionInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userSellInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAuctionInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctionsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsOnMetaverse",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "salesOnMetaverseLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onSales",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canSell",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "salesCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "salesOnMetaverse",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "userAuctionInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSalesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionsOnMetaverseLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "biddings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOfferInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "biddingsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canCreateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSellInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOnSaleAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onAuctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBanned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOfferInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionExtensionInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSellInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAuctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionsOnMetaverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "salesOnMetaverseLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salesCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesOnMetaverse",
    data: BytesLike
  ): Result;

  events: {
    "Sell(uint256,address,uint256,address,uint256,uint256,bool,bytes32)": EventFragment;
    "ChangeSellPrice(uint256,address,uint256,uint256,bytes32)": EventFragment;
    "Buy(uint256,address,uint256,address,uint256,bool,bytes32)": EventFragment;
    "CancelSale(uint256,address,uint256,uint256,bytes32)": EventFragment;
    "MakeOffer(uint256,address,uint256,address,uint256,uint256,bool,bytes32)": EventFragment;
    "CancelOffer(uint256,address,uint256,uint256,bytes32)": EventFragment;
    "AcceptOffer(uint256,address,uint256,address,uint256,bool,bytes32)": EventFragment;
    "CreateAuction(uint256,address,uint256,address,uint256,uint256,uint256,bytes32)": EventFragment;
    "CancelAuction(uint256,address,uint256,bytes32)": EventFragment;
    "Bid(uint256,address,uint256,address,uint256,uint256,bytes32,uint256)": EventFragment;
    "Claim(uint256,address,uint256,address,uint256,uint256,bytes32,uint256)": EventFragment;
    "CancelSaleByOwner(uint256,address,uint256,bytes32)": EventFragment;
    "CancelOfferByOwner(uint256,address,uint256,bytes32)": EventFragment;
    "CancelAuctionByOwner(uint256,address,uint256,bytes32)": EventFragment;
    "Ban(address)": EventFragment;
    "Unban(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSellPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSaleByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOfferByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuctionByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unban"): EventFragment;
}

export class IItemStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IItemStoreInterface;

  functions: {
    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onSalesCount(item: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "onSalesCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    biddings(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(bytes32,uint256)"(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    userAuctionInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    "userAuctionInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelSale(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelSale(bytes32[])"(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    acceptOffer(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptOffer(bytes32,uint256)"(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchTransfer(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTransfer(uint256[],address[],uint256[],address[],uint256[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    makeOffer(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canOffer(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canOffer(address,uint256,address,uint256,uint256)"(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userOfferInfo(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { offerVerificationID: string }>;

    "userOfferInfo(address,uint256)"(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { offerVerificationID: string }>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sell(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOnSaleAmounts(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userOnSaleAmounts(address,address,uint256)"(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonce(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(bytes32[],uint256[],uint256[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sales(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        verificationID: string;
      }
    >;

    "sales(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        verificationID: string;
      }
    >;

    onAuctions(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    "onAuctions(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeSellPrice(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSellPrice(bytes32[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSaleInfo(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        saleId: BigNumber;
      }
    >;

    "getSaleInfo(bytes32)"(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        saleId: BigNumber;
      }
    >;

    isBanned(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isBanned(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offersCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "offersCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "auctionExtensionInterval()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<[string]>;

    userSellInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;

    "userSellInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionsOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    "auctionsOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { auctionVerificationID: string }>;

    auctions(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    "auctions(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    salesOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "salesOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onSales(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;

    "onSales(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;

    userBiddingInfo(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    "userBiddingInfo(address,uint256)"(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    getOfferInfo(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        offerId: BigNumber;
      }
    >;

    "getOfferInfo(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        offerId: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    canSell(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canSell(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    offers(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        offeror: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        mileage: BigNumber;
        verificationID: string;
      }
    >;

    "offers(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        offeror: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        mileage: BigNumber;
        verificationID: string;
      }
    >;

    salesCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "salesCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOffer(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOffer(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    salesOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;

    "salesOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { saleVerificationID: string }>;
  };

  userAuctionInfoLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userAuctionInfoLength(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onSalesCount(item: string, overrides?: CallOverrides): Promise<BigNumber>;

  "onSalesCount(address)"(
    item: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionsOnMetaverseLength(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "auctionsOnMetaverseLength(uint256)"(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  biddings(
    auctionVerificationID: BytesLike,
    biddingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bidder: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  "biddings(bytes32,uint256)"(
    auctionVerificationID: BytesLike,
    biddingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bidder: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  userAuctionInfo(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "userAuctionInfo(address,uint256)"(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createAuction(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    startTotalPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    startTotalPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelSale(
    saleVerificationIDs: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelSale(bytes32[])"(
    saleVerificationIDs: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBiddingInfoLength(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBiddingInfoLength(address)"(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  acceptOffer(
    offerVerificationID: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptOffer(bytes32,uint256)"(
    offerVerificationID: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchTransfer(
    metaverseIds: BigNumberish[],
    items: string[],
    ids: BigNumberish[],
    to: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTransfer(uint256[],address[],uint256[],address[],uint256[])"(
    metaverseIds: BigNumberish[],
    items: string[],
    ids: BigNumberish[],
    to: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelAuction(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuction(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  makeOffer(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    unitPrice: BigNumberish,
    partialBuying: boolean,
    mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)"(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    unitPrice: BigNumberish,
    partialBuying: boolean,
    mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canOffer(
    offeror: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canOffer(address,uint256,address,uint256,uint256)"(
    offeror: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userOfferInfo(
    offeror: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "userOfferInfo(address,uint256)"(
    offeror: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  biddingsCount(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "biddingsCount(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bid(
    auctionVerificationID: BytesLike,
    price: BigNumberish,
    mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bid(bytes32,uint256,uint256)"(
    auctionVerificationID: BytesLike,
    price: BigNumberish,
    mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canCreateAuction(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canCreateAuction(address,uint256,address,uint256,uint256)"(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userSellInfoLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userSellInfoLength(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sell(
    metaverseIds: BigNumberish[],
    items: string[],
    ids: BigNumberish[],
    amounts: BigNumberish[],
    unitPrices: BigNumberish[],
    partialBuyings: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])"(
    metaverseIds: BigNumberish[],
    items: string[],
    ids: BigNumberish[],
    amounts: BigNumberish[],
    unitPrices: BigNumberish[],
    partialBuyings: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionsCount(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "auctionsCount(address,uint256)"(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOnSaleAmounts(
    seller: string,
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userOnSaleAmounts(address,address,uint256)"(
    seller: string,
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonce(address)"(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    saleVerificationIDs: BytesLike[],
    amounts: BigNumberish[],
    unitPrices: BigNumberish[],
    mileages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(bytes32[],uint256[],uint256[],uint256[])"(
    saleVerificationIDs: BytesLike[],
    amounts: BigNumberish[],
    unitPrices: BigNumberish[],
    mileages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sales(
    item: string,
    id: BigNumberish,
    saleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      unitPrice: BigNumber;
      partialBuying: boolean;
      verificationID: string;
    }
  >;

  "sales(address,uint256,uint256)"(
    item: string,
    id: BigNumberish,
    saleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      unitPrice: BigNumber;
      partialBuying: boolean;
      verificationID: string;
    }
  >;

  onAuctions(
    item: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "onAuctions(address,uint256)"(
    item: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  canBid(
    bidder: string,
    price: BigNumberish,
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canBid(address,uint256,bytes32)"(
    bidder: string,
    price: BigNumberish,
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeSellPrice(
    saleVerificationIDs: BytesLike[],
    unitPrices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSellPrice(bytes32[],uint256[])"(
    saleVerificationIDs: BytesLike[],
    unitPrices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSaleInfo(
    saleVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      saleId: BigNumber;
    }
  >;

  "getSaleInfo(bytes32)"(
    saleVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      saleId: BigNumber;
    }
  >;

  isBanned(user: string, overrides?: CallOverrides): Promise<boolean>;

  "isBanned(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userOfferInfoLength(
    offeror: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userOfferInfoLength(address)"(
    offeror: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offersCount(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "offersCount(address,uint256)"(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

  userSellInfo(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "userSellInfo(address,uint256)"(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAuctionInfo(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      auctionId: BigNumber;
    }
  >;

  "getAuctionInfo(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      auctionId: BigNumber;
    }
  >;

  onAuctionsCount(item: string, overrides?: CallOverrides): Promise<BigNumber>;

  "onAuctionsCount(address)"(
    item: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionsOnMetaverse(
    metaverseId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "auctionsOnMetaverse(uint256,uint256)"(
    metaverseId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctions(
    item: string,
    id: BigNumberish,
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      startTotalPrice: BigNumber;
      endBlock: BigNumber;
      verificationID: string;
    }
  >;

  "auctions(address,uint256,uint256)"(
    item: string,
    id: BigNumberish,
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      startTotalPrice: BigNumber;
      endBlock: BigNumber;
      verificationID: string;
    }
  >;

  salesOnMetaverseLength(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "salesOnMetaverseLength(uint256)"(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onSales(
    item: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "onSales(address,uint256)"(
    item: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userBiddingInfo(
    bidder: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      auctionVerificationID: string;
      biddingId: BigNumber;
    }
  >;

  "userBiddingInfo(address,uint256)"(
    bidder: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      auctionVerificationID: string;
      biddingId: BigNumber;
    }
  >;

  getOfferInfo(
    offerVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      offerId: BigNumber;
    }
  >;

  "getOfferInfo(bytes32)"(
    offerVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      offerId: BigNumber;
    }
  >;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  canSell(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canSell(address,uint256,address,uint256,uint256)"(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  offers(
    item: string,
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      string
    ] & {
      offeror: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      unitPrice: BigNumber;
      partialBuying: boolean;
      mileage: BigNumber;
      verificationID: string;
    }
  >;

  "offers(address,uint256,uint256)"(
    item: string,
    id: BigNumberish,
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      string
    ] & {
      offeror: string;
      metaverseId: BigNumber;
      _item: string;
      _id: BigNumber;
      amount: BigNumber;
      unitPrice: BigNumber;
      partialBuying: boolean;
      mileage: BigNumber;
      verificationID: string;
    }
  >;

  salesCount(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "salesCount(address,uint256)"(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOffer(
    offerVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOffer(bytes32)"(
    offerVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  salesOnMetaverse(
    metaverseId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "salesOnMetaverse(uint256,uint256)"(
    metaverseId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSalesCount(item: string, overrides?: CallOverrides): Promise<BigNumber>;

    "onSalesCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    biddings(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(bytes32,uint256)"(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    userAuctionInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "userAuctionInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSale(
      saleVerificationIDs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelSale(bytes32[])"(
      saleVerificationIDs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptOffer(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptOffer(bytes32,uint256)"(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransfer(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransfer(uint256[],address[],uint256[],address[],uint256[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canOffer(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canOffer(address,uint256,address,uint256,uint256)"(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userOfferInfo(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "userOfferInfo(address,uint256)"(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOnSaleAmounts(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOnSaleAmounts(address,address,uint256)"(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(bytes32[],uint256[],uint256[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sales(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        verificationID: string;
      }
    >;

    "sales(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        verificationID: string;
      }
    >;

    onAuctions(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "onAuctions(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeSellPrice(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSellPrice(bytes32[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getSaleInfo(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        saleId: BigNumber;
      }
    >;

    "getSaleInfo(bytes32)"(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        saleId: BigNumber;
      }
    >;

    isBanned(user: string, overrides?: CallOverrides): Promise<boolean>;

    "isBanned(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offersCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

    userSellInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "userSellInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "auctionsOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctions(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    "auctions(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    salesOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salesOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSales(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "onSales(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userBiddingInfo(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    "userBiddingInfo(address,uint256)"(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    getOfferInfo(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        offerId: BigNumber;
      }
    >;

    "getOfferInfo(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        offerId: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    canSell(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canSell(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    offers(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        offeror: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        mileage: BigNumber;
        verificationID: string;
      }
    >;

    "offers(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        offeror: string;
        metaverseId: BigNumber;
        _item: string;
        _id: BigNumber;
        amount: BigNumber;
        unitPrice: BigNumber;
        partialBuying: boolean;
        mileage: BigNumber;
        verificationID: string;
      }
    >;

    salesCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salesCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOffer(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    salesOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "salesOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Sell(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      seller: null,
      amount: null,
      unitPrice: null,
      partialBuying: null,
      saleVerificationID: BytesLike | null
    ): EventFilter;

    ChangeSellPrice(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      newUnitPrice: null,
      saleVerificationID: BytesLike | null
    ): EventFilter;

    Buy(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      buyer: null,
      amount: null,
      isFulfilled: null,
      saleVerificationID: BytesLike | null
    ): EventFilter;

    CancelSale(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      amount: null,
      saleVerificationID: BytesLike | null
    ): EventFilter;

    MakeOffer(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      offeror: null,
      amount: null,
      unitPrice: null,
      partialBuying: null,
      offerVerificationID: BytesLike | null
    ): EventFilter;

    CancelOffer(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      amount: null,
      offerVerificationID: BytesLike | null
    ): EventFilter;

    AcceptOffer(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      acceptor: null,
      amount: null,
      isFulfilled: null,
      offerVerificationID: BytesLike | null
    ): EventFilter;

    CreateAuction(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      seller: null,
      amount: null,
      startPrice: null,
      endBlock: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    CancelAuction(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    Bid(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      bidder: null,
      amount: null,
      price: null,
      auctionVerificationID: BytesLike | null,
      biddingId: null
    ): EventFilter;

    Claim(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      bestBidder: null,
      amount: null,
      price: null,
      auctionVerificationID: BytesLike | null,
      biddingId: null
    ): EventFilter;

    CancelSaleByOwner(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      saleVerificationID: BytesLike | null
    ): EventFilter;

    CancelOfferByOwner(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      offerVerificationID: BytesLike | null
    ): EventFilter;

    CancelAuctionByOwner(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    Ban(user: string | null): EventFilter;

    Unban(user: string | null): EventFilter;
  };

  estimateGas: {
    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSalesCount(item: string, overrides?: CallOverrides): Promise<BigNumber>;

    "onSalesCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    biddings(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddings(bytes32,uint256)"(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAuctionInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelSale(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelSale(bytes32[])"(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptOffer(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptOffer(bytes32,uint256)"(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchTransfer(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTransfer(uint256[],address[],uint256[],address[],uint256[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    makeOffer(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canOffer(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canOffer(address,uint256,address,uint256,uint256)"(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferInfo(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfo(address,uint256)"(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOnSaleAmounts(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOnSaleAmounts(address,address,uint256)"(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(bytes32[],uint256[],uint256[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    sales(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sales(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onAuctions(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctions(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSellPrice(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeSellPrice(bytes32[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSaleInfo(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSaleInfo(bytes32)"(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBanned(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBanned(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offersCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionExtensionInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionExtensionInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    userSellInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userSellInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctions(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    salesOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salesOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSales(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSales(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBiddingInfo(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfo(address,uint256)"(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferInfo(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOfferInfo(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    canSell(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canSell(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offers(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    salesCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salesCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOffer(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOffer(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    salesOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salesOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onSalesCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onSalesCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    biddings(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddings(bytes32,uint256)"(
      auctionVerificationID: BytesLike,
      biddingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAuctionInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelSale(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelSale(bytes32[])"(
      saleVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptOffer(bytes32,uint256)"(
      offerVerificationID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTransfer(uint256[],address[],uint256[],address[],uint256[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      to: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    makeOffer(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeOffer(uint256,address,uint256,uint256,uint256,bool,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      unitPrice: BigNumberish,
      partialBuying: boolean,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canOffer(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canOffer(address,uint256,address,uint256,uint256)"(
      offeror: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOfferInfo(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userOfferInfo(address,uint256)"(
      offeror: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userSellInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userSellInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sell(uint256[],address[],uint256[],uint256[],uint256[],bool[])"(
      metaverseIds: BigNumberish[],
      items: string[],
      ids: BigNumberish[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      partialBuyings: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOnSaleAmounts(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userOnSaleAmounts(address,address,uint256)"(
      seller: string,
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(bytes32[],uint256[],uint256[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      amounts: BigNumberish[],
      unitPrices: BigNumberish[],
      mileages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sales(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sales(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onAuctions(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctions(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSellPrice(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSellPrice(bytes32[],uint256[])"(
      saleVerificationIDs: BytesLike[],
      unitPrices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSaleInfo(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSaleInfo(bytes32)"(
      saleVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBanned(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBanned(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOfferInfoLength(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userOfferInfoLength(address)"(
      offeror: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offersCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionExtensionInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionExtensionInterval()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userSellInfo(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userSellInfo(address,uint256)"(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salesOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salesOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onSales(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onSales(address,uint256)"(
      item: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfo(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfo(address,uint256)"(
      bidder: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferInfo(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOfferInfo(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canSell(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canSell(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(address,uint256,uint256)"(
      item: string,
      id: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salesCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salesCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOffer(bytes32)"(
      offerVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    salesOnMetaverse(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salesOnMetaverse(uint256,uint256)"(
      metaverseId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
