/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PFPsInterface extends ethers.utils.Interface {
  functions: {
    "propose(address)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "extras(address)": FunctionFragment;
    "addrs(uint256)": FunctionFragment;
    "managerPFPs(address,uint256)": FunctionFragment;
    "managersIndex(address,address)": FunctionFragment;
    "setExtra(address,string)": FunctionFragment;
    "setRoyalty(address,address,uint256)": FunctionFragment;
    "addedBlocks(address)": FunctionFragment;
    "addByPFPOwner(address)": FunctionFragment;
    "managers(address,uint256)": FunctionFragment;
    "getTotalSupply(address)": FunctionFragment;
    "managerPFPsIndex(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTotalSupply(address,uint256)": FunctionFragment;
    "added(address)": FunctionFragment;
    "addManager(address,address)": FunctionFragment;
    "addByMinter(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "managerCount(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "enumerables(address)": FunctionFragment;
    "totalSupplies(address)": FunctionFragment;
    "ban(address)": FunctionFragment;
    "banned(address)": FunctionFragment;
    "passProposal(uint256)": FunctionFragment;
    "royalties(address)": FunctionFragment;
    "existsManager(address,address)": FunctionFragment;
    "unban(address)": FunctionFragment;
    "managerPFPCount(address)": FunctionFragment;
    "addByOwner(address,address)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setEnumerable(address,bool)": FunctionFragment;
    "removeManager(address,address)": FunctionFragment;
    "addrCount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "propose", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "extras", values: [string]): string;
  encodeFunctionData(functionFragment: "addrs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "managerPFPs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managersIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtra",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addedBlocks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addByPFPOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "managerPFPsIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "added", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addByMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "enumerables", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupplies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ban", values: [string]): string;
  encodeFunctionData(functionFragment: "banned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "passProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "royalties", values: [string]): string;
  encodeFunctionData(
    functionFragment: "existsManager",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "unban", values: [string]): string;
  encodeFunctionData(
    functionFragment: "managerPFPCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addByOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnumerable",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addrCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extras", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addrs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerPFPs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExtra", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addByPFPOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerPFPsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "added", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addByMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enumerables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ban", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "banned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "passProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "existsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unban", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerPFPCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addByOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnumerable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addrCount", data: BytesLike): Result;

  events: {
    "Propose(address,address)": EventFragment;
    "Add(address,address)": EventFragment;
    "AddManager(address,address)": EventFragment;
    "RemoveManager(address,address)": EventFragment;
    "SetEnumerable(address,bool)": EventFragment;
    "SetTotalSupply(address,uint256)": EventFragment;
    "SetRoyalty(address,address,uint256)": EventFragment;
    "SetExtra(address,string)": EventFragment;
    "Ban(address)": EventFragment;
    "Unban(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Propose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEnumerable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTotalSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRoyalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExtra"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PFPs extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PFPsInterface;

  functions: {
    propose(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "propose(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; manager: string }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; manager: string }>;

    extras(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "extras(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "addrs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    managerPFPs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "managerPFPs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    managersIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "managersIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setExtra(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExtra(address,string)"(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoyalty(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoyalty(address,address,uint256)"(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addedBlocks(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "addedBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addByPFPOwner(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addByPFPOwner(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    managers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "managers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTotalSupply(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalSupply(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    managerPFPsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "managerPFPsIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setTotalSupply(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTotalSupply(address,uint256)"(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    added(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "added(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addByMinter(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addByMinter(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    managerCount(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "managerCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    enumerables(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "enumerables(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupplies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ban(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "ban(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    banned(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "banned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    passProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "passProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    royalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

    "royalties(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

    existsManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "existsManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unban(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "unban(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    managerPFPCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "managerPFPCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addByOwner(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addByOwner(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEnumerable(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEnumerable(address,bool)"(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addrCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "addrCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  propose(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "propose(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { addr: string; manager: string }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { addr: string; manager: string }>;

  extras(arg0: string, overrides?: CallOverrides): Promise<string>;

  "extras(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  addrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "addrs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  managerPFPs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "managerPFPs(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  managersIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "managersIndex(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setExtra(
    addr: string,
    extra: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExtra(address,string)"(
    addr: string,
    extra: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoyalty(
    addr: string,
    receiver: string,
    royalty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoyalty(address,address,uint256)"(
    addr: string,
    receiver: string,
    royalty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addedBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "addedBlocks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addByPFPOwner(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addByPFPOwner(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  managers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "managers(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalSupply(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalSupply(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  managerPFPsIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "managerPFPsIndex(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setTotalSupply(
    addr: string,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTotalSupply(address,uint256)"(
    addr: string,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  added(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "added(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addManager(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addManager(address,address)"(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addByMinter(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addByMinter(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  managerCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "managerCount(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  enumerables(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "enumerables(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupplies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupplies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ban(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "ban(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  banned(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "banned(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  passProposal(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "passProposal(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  royalties(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

  "royalties(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

  existsManager(
    addr: string,
    manager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "existsManager(address,address)"(
    addr: string,
    manager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unban(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "unban(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  managerPFPCount(
    manager: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "managerPFPCount(address)"(
    manager: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addByOwner(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addByOwner(address,address)"(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEnumerable(
    addr: string,
    enumerable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEnumerable(address,bool)"(
    addr: string,
    enumerable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeManager(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeManager(address,address)"(
    addr: string,
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addrCount(overrides?: CallOverrides): Promise<BigNumber>;

  "addrCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    propose(addr: string, overrides?: CallOverrides): Promise<void>;

    "propose(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; manager: string }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; manager: string }>;

    extras(arg0: string, overrides?: CallOverrides): Promise<string>;

    "extras(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    addrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "addrs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    managerPFPs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "managerPFPs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    managersIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managersIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtra(
      addr: string,
      extra: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExtra(address,string)"(
      addr: string,
      extra: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalty(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalty(address,address,uint256)"(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addedBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "addedBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addByPFPOwner(addr: string, overrides?: CallOverrides): Promise<void>;

    "addByPFPOwner(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    managers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "managers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalSupply(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerPFPsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managerPFPsIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setTotalSupply(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalSupply(address,uint256)"(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    added(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "added(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addByMinter(addr: string, overrides?: CallOverrides): Promise<void>;

    "addByMinter(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    managerCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "managerCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    enumerables(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "enumerables(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupplies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ban(addr: string, overrides?: CallOverrides): Promise<void>;

    "ban(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    banned(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "banned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    passProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "passProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    royalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

    "royalties(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royalty: BigNumber }>;

    existsManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "existsManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unban(addr: string, overrides?: CallOverrides): Promise<void>;

    "unban(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    managerPFPCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managerPFPCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addByOwner(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addByOwner(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnumerable(
      addr: string,
      enumerable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEnumerable(address,bool)"(
      addr: string,
      enumerable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addrCount(overrides?: CallOverrides): Promise<BigNumber>;

    "addrCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Propose(addr: string | null, manager: string | null): EventFilter;

    Add(addr: string | null, manager: string | null): EventFilter;

    AddManager(addr: string | null, manager: string | null): EventFilter;

    RemoveManager(addr: string | null, manager: string | null): EventFilter;

    SetEnumerable(addr: string | null, enumerable: null): EventFilter;

    SetTotalSupply(addr: string | null, totalSupply: null): EventFilter;

    SetRoyalty(addr: string | null, receiver: null, royalty: null): EventFilter;

    SetExtra(addr: string | null, extra: null): EventFilter;

    Ban(addr: string | null): EventFilter;

    Unban(addr: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    propose(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "propose(address)"(addr: string, overrides?: Overrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extras(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "extras(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "addrs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerPFPs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managerPFPs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managersIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managersIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtra(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExtra(address,string)"(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoyalty(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoyalty(address,address,uint256)"(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addedBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "addedBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addByPFPOwner(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "addByPFPOwner(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    managers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerPFPsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managerPFPsIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setTotalSupply(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTotalSupply(address,uint256)"(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    added(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "added(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addByMinter(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "addByMinter(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    managerCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "managerCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    enumerables(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "enumerables(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ban(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "ban(address)"(addr: string, overrides?: Overrides): Promise<BigNumber>;

    banned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "banned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "passProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    royalties(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "royalties(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existsManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "existsManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unban(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "unban(address)"(addr: string, overrides?: Overrides): Promise<BigNumber>;

    managerPFPCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managerPFPCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addByOwner(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addByOwner(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEnumerable(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEnumerable(address,bool)"(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addrCount(overrides?: CallOverrides): Promise<BigNumber>;

    "addrCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    propose(addr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "propose(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extras(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extras(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addrs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerPFPs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managerPFPs(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managersIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managersIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExtra(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExtra(address,string)"(
      addr: string,
      extra: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoyalty(address,address,uint256)"(
      addr: string,
      receiver: string,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addedBlocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addedBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addByPFPOwner(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addByPFPOwner(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalSupply(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerPFPsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managerPFPsIndex(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setTotalSupply(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTotalSupply(address,uint256)"(
      addr: string,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    added(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "added(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addByMinter(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addByMinter(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managerCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enumerables(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enumerables(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ban(addr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "ban(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    banned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "banned(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    passProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "passProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    royalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royalties(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existsManager(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "existsManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unban(addr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "unban(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    managerPFPCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managerPFPCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addByOwner(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addByOwner(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEnumerable(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEnumerable(address,bool)"(
      addr: string,
      enumerable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeManager(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeManager(address,address)"(
      addr: string,
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addrCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addrCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
