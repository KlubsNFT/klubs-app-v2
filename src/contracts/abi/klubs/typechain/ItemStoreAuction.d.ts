/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ItemStoreAuctionInterface extends ethers.utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "userAuctionInfoLength(address)": FunctionFragment;
    "mileage()": FunctionFragment;
    "auctionsOnMetaverseLength(uint256)": FunctionFragment;
    "biddings(bytes32,uint256)": FunctionFragment;
    "userAuctionInfo(address,uint256)": FunctionFragment;
    "createAuction(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "userBiddingInfoLength(address)": FunctionFragment;
    "cancelAuction(bytes32)": FunctionFragment;
    "biddingsCount(bytes32)": FunctionFragment;
    "bid(bytes32,uint256,uint256)": FunctionFragment;
    "canCreateAuction(address,uint256,address,uint256,uint256)": FunctionFragment;
    "auctionsCount(address,uint256)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "onAuctions(address,uint256)": FunctionFragment;
    "canBid(address,uint256,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "mix()": FunctionFragment;
    "getAuctionInfo(bytes32)": FunctionFragment;
    "onAuctionsCount(address)": FunctionFragment;
    "auctionsOnMetaverse(uint256,uint256)": FunctionFragment;
    "auctions(address,uint256,uint256)": FunctionFragment;
    "cancelAuctionByOwner(bytes32[])": FunctionFragment;
    "userBiddingInfo(address,uint256)": FunctionFragment;
    "onKIP37Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "commonData()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctionInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mileage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionsOnMetaverseLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "biddings",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctionInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfoLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "biddingsCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canCreateAuction",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canBid",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onKIP37BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuctionInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctionsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsOnMetaverse",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuctionByOwner",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userBiddingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onKIP37Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commonData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuctionInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mileage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsOnMetaverseLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "biddings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "biddingsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canCreateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onAuctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onKIP37BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAuctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionsOnMetaverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuctionByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBiddingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKIP37Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commonData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreateAuction(uint256,address,uint256,address,uint256,uint256,uint256,bytes32)": EventFragment;
    "CancelAuction(uint256,address,uint256,bytes32)": EventFragment;
    "Bid(uint256,address,uint256,address,uint256,uint256,bytes32,uint256)": EventFragment;
    "Claim(uint256,address,uint256,address,uint256,uint256,bytes32,uint256)": EventFragment;
    "CancelAuctionByOwner(uint256,address,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuctionByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ItemStoreAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ItemStoreAuctionInterface;

  functions: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mileage(overrides?: CallOverrides): Promise<[string]>;

    "mileage()"(overrides?: CallOverrides): Promise<[string]>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    biddings(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    onAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onAuctions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    onKIP37BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionsOnMetaverse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "auctionsOnMetaverse(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    "auctions(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    cancelAuctionByOwner(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuctionByOwner(bytes32[])"(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    onKIP37Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onKIP37Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commonData(overrides?: CallOverrides): Promise<[string]>;

    "commonData()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userAuctionInfoLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userAuctionInfoLength(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mileage(overrides?: CallOverrides): Promise<string>;

  "mileage()"(overrides?: CallOverrides): Promise<string>;

  auctionsOnMetaverseLength(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "auctionsOnMetaverseLength(uint256)"(
    metaverseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  biddings(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bidder: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  "biddings(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bidder: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
      mileage: BigNumber;
    }
  >;

  userAuctionInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "userAuctionInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createAuction(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    startTotalPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    startTotalPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBiddingInfoLength(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBiddingInfoLength(address)"(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelAuction(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuction(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  biddingsCount(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "biddingsCount(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bid(
    auctionVerificationID: BytesLike,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bid(bytes32,uint256,uint256)"(
    auctionVerificationID: BytesLike,
    price: BigNumberish,
    _mileage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canCreateAuction(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canCreateAuction(address,uint256,address,uint256,uint256)"(
    seller: string,
    metaverseId: BigNumberish,
    item: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionsCount(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "auctionsCount(address,uint256)"(
    item: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonce(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  onAuctions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "onAuctions(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  canBid(
    bidder: string,
    price: BigNumberish,
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canBid(address,uint256,bytes32)"(
    bidder: string,
    price: BigNumberish,
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  onKIP37BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  getAuctionInfo(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      auctionId: BigNumber;
    }
  >;

  "getAuctionInfo(bytes32)"(
    auctionVerificationID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      item: string;
      id: BigNumber;
      auctionId: BigNumber;
    }
  >;

  onAuctionsCount(item: string, overrides?: CallOverrides): Promise<BigNumber>;

  "onAuctionsCount(address)"(
    item: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionsOnMetaverse(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "auctionsOnMetaverse(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctions(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      startTotalPrice: BigNumber;
      endBlock: BigNumber;
      verificationID: string;
    }
  >;

  "auctions(address,uint256,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      seller: string;
      metaverseId: BigNumber;
      item: string;
      id: BigNumber;
      amount: BigNumber;
      startTotalPrice: BigNumber;
      endBlock: BigNumber;
      verificationID: string;
    }
  >;

  cancelAuctionByOwner(
    auctionVerificationIDs: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuctionByOwner(bytes32[])"(
    auctionVerificationIDs: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBiddingInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      auctionVerificationID: string;
      biddingId: BigNumber;
    }
  >;

  "userBiddingInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      auctionVerificationID: string;
      biddingId: BigNumber;
    }
  >;

  onKIP37Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onKIP37Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commonData(overrides?: CallOverrides): Promise<string>;

  "commonData()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mileage(overrides?: CallOverrides): Promise<string>;

    "mileage()"(overrides?: CallOverrides): Promise<string>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    biddings(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    "biddings(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidder: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        mileage: BigNumber;
      }
    >;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    onAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "onAuctions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    onKIP37BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        item: string;
        id: BigNumber;
        auctionId: BigNumber;
      }
    >;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "auctionsOnMetaverse(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    "auctions(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        seller: string;
        metaverseId: BigNumber;
        item: string;
        id: BigNumber;
        amount: BigNumber;
        startTotalPrice: BigNumber;
        endBlock: BigNumber;
        verificationID: string;
      }
    >;

    cancelAuctionByOwner(
      auctionVerificationIDs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuctionByOwner(bytes32[])"(
      auctionVerificationIDs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        auctionVerificationID: string;
        biddingId: BigNumber;
      }
    >;

    onKIP37Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onKIP37Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    commonData(overrides?: CallOverrides): Promise<string>;

    "commonData()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreateAuction(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      seller: null,
      amount: null,
      startPrice: null,
      endBlock: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    CancelAuction(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    Bid(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      bidder: null,
      amount: null,
      price: null,
      auctionVerificationID: BytesLike | null,
      biddingId: null
    ): EventFilter;

    Claim(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      bestBidder: null,
      amount: null,
      price: null,
      auctionVerificationID: BytesLike | null,
      biddingId: null
    ): EventFilter;

    CancelAuctionByOwner(
      metaverseId: BigNumberish | null,
      item: string | null,
      id: null,
      auctionVerificationID: BytesLike | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mileage(overrides?: CallOverrides): Promise<BigNumber>;

    "mileage()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    biddings(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddings(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    onAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onKIP37BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionsOnMetaverse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionsOnMetaverse(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctions(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuctionByOwner(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuctionByOwner(bytes32[])"(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onKIP37Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onKIP37Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commonData(overrides?: CallOverrides): Promise<BigNumber>;

    "commonData()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAuctionInfoLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfoLength(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mileage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mileage()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionsOnMetaverseLength(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsOnMetaverseLength(uint256)"(
      metaverseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    biddings(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddings(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAuctionInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAuctionInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,address,uint256,uint256,uint256,uint256)"(
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTotalPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfoLength(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfoLength(address)"(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuction(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    biddingsCount(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "biddingsCount(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bid(bytes32,uint256,uint256)"(
      auctionVerificationID: BytesLike,
      price: BigNumberish,
      _mileage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canCreateAuction(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCreateAuction(address,uint256,address,uint256,uint256)"(
      seller: string,
      metaverseId: BigNumberish,
      item: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsCount(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsCount(address,uint256)"(
      item: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonce(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canBid(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canBid(address,uint256,bytes32)"(
      bidder: string,
      price: BigNumberish,
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKIP37BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onKIP37BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionInfo(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionInfo(bytes32)"(
      auctionVerificationID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onAuctionsCount(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onAuctionsCount(address)"(
      item: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsOnMetaverse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionsOnMetaverse(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuctionByOwner(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuctionByOwner(bytes32[])"(
      auctionVerificationIDs: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBiddingInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBiddingInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onKIP37Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onKIP37Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commonData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commonData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
